awk [option] '[BEGIN{}][pattern] {action}[END{}]' file ...
awk [option] -f <script> file ...

演示 awk '{action}' file
	action 每行都会执行一次
	df | awk 'print $1,$2' 
		$n:n代表第几个字段
		$0:代表所有的字段
		NF
		print和echo差不多的用法
演示 awk 'BEGIN{} {} END{}' 特殊的action
	
分隔符
	输入分隔符 FS（field separator)
		-F# （option)
		-v FS="#" (内置变量)
	输出分隔符 OFS　(out filed separator)
		-v OFS="+++"
	同时指定：-v FS="#" -v OSF="+++"
	$1和$2中间的‘，’

变量 在action内访问变量时，不需要$符号,除了 $n
	内置变量 FS OFS RS ORS NF NR FNR FILENAME ARGC ARGV
		NR 	所有行都会有一个统一的行号
		FNR 每个文件有自己单独的行号
		RS 	awk用来判断输入文本的行结尾
		ORS	awk输出的时候，在每一行结尾添加的字符
		FILENAME
		ARGC (count) 参数数量，包括awk命令本身
		ARGV （value) 参数数组
	自定义变量
		用-v path=$PATH，可以访问shell中变量
		在action中定义，‘{name="wang";age=12; print}',必须用；隔开
		pattern和action都可以访问变量

shell中的printf命令 
	替换符：不会在输出后面自动添加\n
		%s %f %c %b %d %i %o %u %x %X %%
		演示：
		printf "%s\n" abc def
		printf "%s %s %s\n"  a b c d e f g h k
	修饰符 n + -
		%ns  n代表数字，代表每个字段占固定宽度的字符长度
		-ns  左对齐
		%+nd 修饰数字时，可以在数字前面显示出正负号
		----------
		%12.3d %12.3f
			替换符为数字的前面的修饰符有小数点时，小数点前为字符宽度
			对于整数d，长度为3,不足高位用0替补
			对于浮点数f,代表小数位精度

awk printf格式化文本
	awk中print 和 printf区别
	awk中printf和printf命令的区别
		{printf "%s" , $1,$2,$3}：全部需要‘，’分开
		替换符数量和字段数必须一样

模式 pattern:可以理解为条件，匹配这个条件的行才会被处理！
	awk 'NF==4{action}' file...
		字段数为4的行才会被处理
	关系运算符
		~/正则表达式/ 	满足其后的正则表达式则为true
		!~/正则表达式/	反之
	--------------------------------------
	空模式

	关系运算模式
		‘NR>=3 && NR<=6'
	正则模式
		awk '/^xxx/{print $0}' file :行开头是xxx的才可以被匹配到
		如果正则表达式中有/怎么办？
			使用\/来把它转成普通的字符
		让某个字段满足正则表达式？
			awk '$2~/正则表达式/{action}',不满足呢
			awk -posix '$2~/192\.168\.[0-9]{1,3}\.[0-9]{1,3}/{action}'
	行范围模式
		awk '/正则表达式1/，/正则表达式为2/{action}'
			即，从第一次匹配到正则1的行开始到第一次匹配正则2的行之间所有的行都匹配


action
	{}是用来表示一个代码块的，可以理解为把一些代码当做一个整体
	控制语句
		条件判断:
			‘{if(true){action1}else{action2}}‘
			’{if(true){action}}
			'{if(true){action1}else if(){}else{}'
		循环: 
			‘for(i=0;i<=5;i++){}
			'while(i<=5){i++}'
			还有个do while
		continue
		break
		以上循环和条件判断可以嵌套使用
		exit：跳出，直接执行END{}
		next:和continue像，但continue是控制循环的，这个是处理行时使用的

数组
	直接给变量加下标赋值，就可以了
	awk中的数组，想判断元素是否为空，用if( index in 数组名称),不可以用if(arr[index]=="")
	也可以用非数字做下标
	删除一个元素，delete arr[key]
	删除整个数组，delete arr
	遍历数组
		for(i=0;i<5;i++	){print arr[i]}
		for(i in arr){print arr[i]},这里的i是key,和shell不同，shell这样写获得的是value

	awk中action中可以直接使用数组运算，这和shell不同
	awk中字符串也可以数学运算，不过第一次运算时，就会把字符串的变量当成数字0了，同理，空字符串也这样
	访问一个空元素的数组下标时，会自动将这个元素定义为“”
应用

函数
	内置函数
		数学：
		srand();rand() 搭配使用，前者产生种子，后者产生0-1随机数
		int()将浮点数转换成整数
		字符串：
		gsub(a,b ,str)
			将str中所有的a,替换成b
		sub(a,b,str)
			将第一个匹配到的a替换
		#其中a可以用正则表达式！
		length(str)
			返回str的长度，很有用
			返回数组的长度
		index("str","str1")
			返回str1在str中的位置，无则返回0
		split("str",arr,"sep")
			将str以spe为分隔符，切成数组，放到arr中
			返回的是数组的长度
		其它：
		asort:排序数组
			asort(arr),将arr排序
			asort(arr,newarr),将arr排序后的结果给newarr，不影响arr
			返回的是数组的长度


正则表达式
	正则表达式,就是一种模式,用来表示某种规则;常用来检索,替换那些符合某个模式的文本
	注意:以下语法是基础正则表达式用法,也就是通用的,还有扩展正则表达式,即增加了内容的语法
	
	位置匹配
		^
		$
		^$:^abc$
		\<和\b:一个word的左边界
		\>和\b:一个word的右边界,
		\B:表示非边界
	匹配次数
		注意:\其实在这里是转义的意思,真正的语法是{n,m},只不过在grep中需要转义
		'aa' :单词中有两个及以上连续的aa..都可以匹配到
		'字符\{n\}' 	：匹配到的字符数量=n时成功
		'字符\{n,m\}'	: 匹配到的字符数量＞＝n＆＆＜＝m时成功
		'字符\{n,\}'	:
		'字符\{,m\}'	:不超过m时成功
	    '字符＊'	：代表之间的字符可以出现任意次数，和通配符中的＊不一样，那个代表任意长充的字符串
		. :必须有，且仅有一个字符，包括空格字符，但不包括换行符
		.*:代表任意个字符
		字符\?  :代表前面的字符的次数为0或者1次,和\{\}一样,是基础正则
		字符\+ :代表前面的字符至少出现一次
	特殊符号
		[[:alpha:]]　:代表一个字母　,匹配字母,不区分大小写 [a-zA-Z]
		[[:lower:]]	:代表匹配一个小写字母　 				[a-z]
		[[:upper:]]	:									[A-Z]
		[[:digit:]]	:0-9 								[0-9]	简写:\d
			
		[[:alnum:]]	:字母或者数字
		[[:space:]]	:一个空白字符,包括tab键
		[[:punct:]]	:标点符号
		
		[^] 和　[]相反,是取反,就是非[]中的字符就可以匹配
			同理:[^[ ]]
		简写:
			perl正则表达式处理引擎可以处理简写格式的表达式,默认grep无法处理简写的表达式
			\d:０-９
			\Ｄ:非数字即可
			\t:匹配一个制表符
			\s:匹配一个空格或者制表符
			\Ｓ:非空格字符
	分组
		\(abcd\):即把括号中的当成一个整体
		分组是可以嵌套的
	后向
		使用后向的前提是先分组
		\n代表前面第n个分组匹配到的结果
		"()　(hello) asdbd \2":代表前面第二个分组的结果,比如说hello
		如果(()),即分组时括号嵌套括号,那么如何知道是第几个分组呢
		分组的顺序取决于分组符号左侧符号的顺序,即外层的分组是\１,内层的是\２,同理,多层也如此
